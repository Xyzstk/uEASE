// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---- //
// ssio //
// ---- //

#define ssio_wrap_target 5
#define ssio_wrap 16
#define ssio_pio_version 0

static const uint16_t ssio_program_instructions[] = {
    0xf080, //  0: set    pindirs, 0      side 0
    0x5801, //  1: in     pins, 1         side 1
    0x1081, //  2: jmp    y--, 1          side 0
    0x5801, //  3: in     pins, 1         side 1
    0xe081, //  4: set    pindirs, 1
            //     .wrap_target
    0x98a0, //  5: pull   block           side 1
    0x7001, //  6: out    pins, 1         side 0
    0xf824, //  7: set    x, 4            side 1
    0x7001, //  8: out    pins, 1         side 0
    0xf84e, //  9: set    y, 14           side 1
    0x7001, // 10: out    pins, 1         side 0
    0x184a, // 11: jmp    x--, 10         side 1
    0x7001, // 12: out    pins, 1         side 0
    0x18c0, // 13: jmp    pin, 0          side 1
    0x7001, // 14: out    pins, 1         side 0
    0x188e, // 15: jmp    y--, 14         side 1
    0x7001, // 16: out    pins, 1         side 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ssio_program = {
    .instructions = ssio_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = ssio_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config ssio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ssio_wrap_target, offset + ssio_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

